{
  "name": "YARA-L",
  "scopeName": "source.yara-l",
  "patterns": [
    { "include": "#commments" },
    { "include": "#inline_comments" },
    { "include": "#block_comments" },
    { "include": "#core_structure" },
    { "include": "#required_sections" },
    { "include": "#optional_sections" },
    { "include": "#brackets" },
    { "include": "#numbers" },
    { "include": "#string_constants" },
    { "include": "#regex_constants" },
    { "include": "#assignment_operators" },
    { "include": "#comparison_operators" },
    { "include": "#variables" },
    { "include": "#key_value_pairs" },
    { "include": "#function_expression" },
    { "include": "#function_parameter" },
    { "include": "#reference_list_expression" },
    { "include": "#keywords" },
    { "include": "#mathematical_operators"}
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.block.empty.yara-l",
          "match": "/\\*\\*/",
          "captures": {
            "0": {
                "name": "punctuation.definition.comment.yara-l"
            }
          }
        },
        {
          "include": "#inline_comments"
        }
      ]
    },
    "inline_comments": {
      "name": "comment.line.double-slash.yara-l",
      "match": "\/\/.*"
    },
    "block_comments": {
      "patterns": [
        {
          "name": "comment.block.yara-l",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": [
            {
              "include": "#block_comments"
            }
          ]
        }
      ]
    },
    "core_structure": {
      "match": "(?i)(rule)\\s+([^\\s=\\{]*)",
      "captures": {
        "1": {
          "name": "entity.name.tag.yara-l"
        },
        "2": {
          "name": "entity.name.type.yara-l"
        }
      }
    },
    "required_sections": {
      "name": "keyword.control.yara-l",
      "match": "(?i)\\b(meta|events|condition)\\b"
    },
    "optional_sections": {
      "name": "keyword.control.yara-l",
      "match": "(?i)\\b(match|outcome|options)\\b"
    },
    "brackets": {
      "name": "brackets.yara-l",
      "match": "[\\{\\}\\(\\)\\[\\]]"
    },
    "numbers": {
      "match": "(\\d+\\.?\\d*)(d|h|m)?",
      "captures": {
        "1": {
          "name": "constant.numeric.yara-l"
        },
        "2": {
          "name": "constant.language.yara-l"
        }
      }
    },
    "string_constants": {
      "name": "string.quoted.double.yara-l",
      "match": "\"([^\"\\\\]|\\\\.)*\""
    },
    "regex_constants": {
      "match": "(\\/(?:[^\\/\\\\]|\\\\.)*\\/)|(\\`(?:[^\\`\\\\]|\\\\.)*\\`)",
      "captures": {
        "1": {
          "name": "string.regexp.yara-l"
        },
        "2": {
          "name": "string.regexp.yara-l"
        }
      }
    },
    "assignment_operators": {
      "name": "keyword.operator.assignment.yara-l",
      "match": "="
    },
    "comparison_operators": {
      "name": "keyword.operator.comparison.yara-l",
      "match": "!=|<|<=|>|>="
    },
    "variables": {
      "match": "([$#][^\\s,\\(\\)\\[`=!.<>]+)([^\\s,\\(\\)\\[`=!<>]+)?(?:\\[(\\d+)\\]\\.([a-zA-Z]+))?",
      "captures": {
        "1": {
          "name": "variable.name.yara-l"
        },
        "2": {
          "name": "variable.name.field.yara-l"
        },
        "3": {
          "name": "constant.numeric.yara-l"
        },
        "4": {
          "name": "variable.name.field.yara-l"
        }
      }
    },
    "key_value_pairs": {
      "name": "no-highlight.key.yara-l",
      "match": "^\\s*([^($#\"\\/\\s]+)\\s*="
    },
    "function_expression": {
      "match": "([^\\s+@=\"$(\\+\\-\\/\\*%!]+)(?<!and)\\s*\\(",
      "captures": {
        "1": {
          "name": "support.function.yara-l"
        }
      }
    },
    "function_parameter": {
      "match": "([a-zA-Z\\.\\_]+)\\:([a-zA-Z\\.\\_]+)",
      "captures": {
        "2": {
          "name": "variable.parameter.yara-l"
        }
      }
    },
    "reference_list_expression": {
      "name": "variable.other.reference_list_expression.yara-l",
      "match": "\\B(\\%\\S*)(?<!,)"
    },
    "keywords": {
      "name": "constant.language.yara-l",
      "match": "(?i)\\b(and|or|not|in|true|false|nocase|any|all|over|before|after|if|is|null)\\b"
    },
    "mathematical_operators": {
      "name": "keyword.operator.numeric.yara-l",
      "match": "\\-|\\+|\\*|/|%|!"
    }
  }
}
